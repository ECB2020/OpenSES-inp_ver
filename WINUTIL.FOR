C**** SUBROUTINE WINUTIL
C**** THIS FILE CONTAINS SUBROUTINES WHICH PERFORM VARIOUS
C**** COMPILER-SPECIFIC FUNCTIONS.  TWO VERSIONS OF THIS FILE ARE  
C**** PROVIDED:
C**** (1) DOSUTIL.FOR - THIS FILE IS TO BE USED WITH LAHEY FORTRAN 90
C****                   (VER 3.0) TO CREATE A DOS-BASED SES VERSION.
C****                   WHEN USING LAHEY THE STATEMENT "USE MSFLIB" IN
C****                   DSHARE SHOULD BE COMMENTED OUT.  THE DOS VERSION
C****                   ALSO REQUIRES THE INTERACTER INCLUDE FILE 
C****                   "INTERACT"
C**** (2) WINUTIL.FOR - THIS FILE IS TO BE USED WITH MICROSOFT FORTRAN
C****                   POWERSTATION (VER 4.0) TO CREATE A QUICKWIN-
C****                   BASED SES VERSION.  WHEN USING POWERSTATION
C****                   ADD THE FOLLOWING STATEMENT TO THE BEGINING OF
C****                   DSHARE: "USE MSFLIB".
C**** THE LIST OF SUBROUTINES CONTAINED IN EACH OF THESE TWO FILES AND
C**** THEIR FUNCTIONS ARE LISTED BELOW:
C**** (1) INITIALSETTINGS - INITILIZES QUICKWIN (WINUTIL.FOR ONLY).
C**** (2) GETARGU         - OBTAINS THE NAME OF THE SPECIFIED INPUT FILE
C****                       FROM THE COMMAND LINE, AND OPENS THE INPUT 
C****                       AND TEMPORARY OUTPUT FILES. 
C**** (3) OPENRRST        - OPENS THE READ RESTART FILE
C**** (4) OPENWRST        - OPENS WRITE RESTART FILE
C**** (5) OPENPRNT        - DETERMINES THE LOCATION OF THE PRINTER 
C****                       CONTROL FILE AND OPENS THE TEMPORARY 
C****                       AND FORMATTED OUTPUT FILES.
C**** (6) SETSTATUS       - SETS UP THE DISPLAY STATUS WINDOW
C**** (7) UPDSTATUS       - UPDATES THE STATUS WINDOW
C**** (8) SUBCLASSINIT    - SETS UP THE FRAME AND CHILD WINDOWS
C****                       (WINUTIL.FOR ONLY).
C**** (9) CLEARSCR        - CLOSES DOWN THE INTERACTER SCREEN HANDLING
C****                       SYSTEM.  ALTHOUGH THE SUBROUTINE IS ONLY
C****                       USED IN THE DOS VERSION IS ALSO INCLUDED IN
C****                       WINUTIL.FOR (WITHOUT ANY STATEMENTS) SINCE
C****                       IT IS CALLED FROM DSES.
C****
C**********************************************************************
C****
C                                                                       
C                                              ( DATE: 15 AUGUST 1997 ) 
C     
	INTEGER(4) FUNCTION INITIALSETTINGS
C**** SET FRAME WINDOW SIZE AND MENU
	USE DFLIB
	TYPE (qwinfo) qwi
C**** SET X AND Y COORDINATE OF UPPER LEFT CORNER OF DISPLAY WINDOW      
      qwi.x=0
   	qwi.y=0
C**** SET WIDTH AND HEIGHT OF DISPLAY WINDOW.  IF THE WIDTH IS CHANGED
C**** THE CONSTANT IWIDTH IN SUBROUTINES SETSTATUS AND UPDSTATUS MUST
C**** ALSO BE CHANGED
    	qwi.w=360
	qwi.h=290
	qwi.type=QWIN$SET
	CALL SETMESSAGEQQ('',QWIN$MSG_RUNNING)
	I=SETWSIZEQQ(QWIN$FRAMEWINDOW,qwi)
	I=APPENDMENUQQ(1,0,'Exit'C,WINEXIT)
      INITIALSETTINGS= .true.
	END FUNCTION INITIALSETTINGS

C**********************************************************************
      SUBROUTINE GETARGU
C**** THIS SUBROUTINE OBTAINS THE NAME OF THE SPECIFIED INPUT FILE FROM
C**** THE COMMAND LINE, AND OPENS THE INPUT AND TEMPORARY OUTPUT FILES
      INCLUDE 'DSHARE'
	INTEGER*2 NN
C**** GET NAME OF INPUT FILE FROM COMMAND LINE
      NN=1
      CALL GETARG(NN,INPFILE)
	INPFILE=ADJUSTL(INPFILE)
      I1=LEN_TRIM(INPFILE)
      I2=INDEX(INPFILE,'\',.TRUE.)
      IDOT=INDEX(INPFILE(I2+1:I1), '.', .TRUE.)
      IF (IDOT.NE.0) THEN
        IDOT=I2+(IDOT-1)
      ELSE
        IDOT=I1
      END IF
	FILENAME=INPFILE(1:IDOT)
C**** OPEN INPUT AND TEMPORARY OUTPUT FILES
      OPEN(UNIT=5,FILE=INPFILE,ERR=20,STATUS='OLD',
     1     ACTION='READ', SHARE='DENYWR')
      GOTO 40
C**** INPUT FILE NOT FOUND.  CHECK IF A FILE EXTENSION WAS SPECIFIED
20    IF (IDOT .EQ. I1)THEN
C**** NO EXTENSION WAS SPECIFIED
C**** SEARCH FOR FILE 'FILENAME.INP'
        INPFILE=FILENAME(1:IDOT)//'.INP'
        OPEN(UNIT=5,FILE=INPFILE,ERR=30,STATUS='OLD',
     1       ACTION='READ', SHARE='DENYWR')
        GOTO 40
C**** FILE "FILENAME.INP" NOT FOUND SEARCH FOR FILE "FILENAME.SES"
30      INPFILE=FILENAME(1:IDOT)//'.SES'
        OPEN(UNIT=5,FILE=INPFILE,ERR=10101,STATUS='OLD',
     1       ACTION='READ', SHARE='DENYWR')
      ELSE
C**** AN EXTENSION WAS SPECIFIED
C**** ERROR OPENING INPUT FILE
        GOTO 10101
      END IF
40    OPEN(UNIT=6,FILE=FILENAME(1:IDOT)//'.TMP', ERR=10102,
     1     STATUS='UNKNOWN', ACTION='WRITE', SHARE='DENYWR')
	GOTO 100
C**** ERROR OPENING INPUT FILE 
10101 EXITCODE=101
      CALL EXIT (EXITCODE)
C**** ERROR OPENING TEMPORARY OUTPUT FILE "FILENAME.TMP" 
10102 EXITCODE=102
      CALL EXIT (EXITCODE)
  100 RETURN
      END

C***********************************************************************
C****	SUBROUTINE OPENRRST
      SUBROUTINE OPENRRST
C**** THIS SUBROUTINE OPENS THE READ RESTART FILE
C****
      INCLUDE 'DSHARE'
      OPEN(UNIT=7,FILE=RESTART,STATUS='OLD', ERR=10103, 
     1     ACTION='READ',SHARE='DENYWR')
	GOTO 100
C**** ERROR OPENING SPECIFIED READ RESTART FILE 
10103 EXITCODE=103
      CALL EXIT (EXITCODE)
  100 RETURN
      END

C***********************************************************************
C****	SUBROUTINE OPENWRST
      SUBROUTINE OPENWRST
C**** THIS SUBROUTINE OPENS THE WRITE RESTART FILE
C****
      INCLUDE 'DSHARE'
      OPEN(UNIT=7,FILE=FILENAME(1:IDOT)//'.RST',ERR=10104, 
     1     STATUS='UNKNOWN', ACTION='WRITE',SHARE='DENYWR')
	GOTO 100
C**** ERROR OPENING SPECIFIED WRITE RESTART FILE 
10104 EXITCODE=104
      CALL EXIT (EXITCODE)
  100 RETURN
      END

C***********************************************************************
C****	SUBROUTINE OPENPRNT
      SUBROUTINE OPENPRNT
C**** THIS SUBROUTINE DETERMINES THE LOCATION OF THE PRINTER CONTROL
C**** FILE AND OPENS THE TEMPORARY AND FORMATTED OUTPUT FILES
C****
      USE DFWIN
      INCLUDE 'DSHARE'
      CHARACTER*254 TEMPO
C**** DETERMINE THE LOCATION OF THE PRINTER CONTROL FILE
      I1=GETMODULEFILENAME(0,TEMPO,254)
	I2=INDEX(TEMPO,'\',.TRUE.)
	PRNTCTRL=TEMPO(1:I2)//'PRINTER.CTL'
C**** OPEN TEMPORARY AND FORMATTED OUTPUT FILES
      OPEN(UNIT=6,FILE=FILENAME(1:IDOT)//'.TMP',ERR=10105,
     1     STATUS='OLD', ACTION='READ', SHARE='DENYWR')
      OPEN(UNIT=7, FILE=FILENAME(1:IDOT)//'.PRN',ERR=10106,
     1     STATUS='UNKNOWN', ACTION='WRITE', SHARE='DENYWR')
	GOTO 100
C**** ERROR OPENING TEMPORARY FILE FILENAME.TMP
10105 EXITCODE=105 
      CALL EXIT (EXITCODE)
C**** ERROR OPENING FORMATTED OUTPUT FILE (FILENAME.PRN)
10106 EXITCODE=106
      CALL EXIT (EXITCODE)
  100 RETURN
      END
************************************************************************
C****	SUBROUTINE SETSTATUS
      SUBROUTINE SETSTATUS
C**** THIS SUBROUTINE SETS UP THE DISPLAY STATUS WINDOW
C****
	INCLUDE 'DSHARE'
	INTEGER*2 I1
C**** WIDTH OF STATUS WINDOW IN PIXELS.  SET IN FUNCTION 
C**** INITIALSETTINGS ( VARIABLE QWI.W )
	DATA IWIDTH /360/
	TYPE (XYCOORD) XYS
      LOGICAL STATUS /.FALSE./
	call SubclassInit()

C****  Set for exit without prompting
	I  = SETEXITQQ( QWIN$EXITNOPERSIST )
C**** INITIALIZE FONTS
      I1 = INITIALIZEFONTS()
C**** SET BACKGROUND COLOR AND CLEAR DISPLAY WINDOW
	I1 = SETBKCOLORRGB(#00C0C0C0)
	CALL CLEARSCREEN($GCLEARSCREEN)
C**** SET CURRENT FONT TYPE AND GRAPHICS COLOR INDEX
      I2 = SETCOLORrgb(#0000ff)
      I1 = SETFONT('T''ARIAL''H15W8EB')
      I1 = SETCOLOR(0)
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
	I1=GETGTEXTEXTENT('SUBWAY ENVIRONMENT SIMULATION')
      I1=( IWIDTH - I1 )/2.0
      CALL MOVETO(I1,INT2(5),XYS)
      CALL OUTGTEXT('SUBWAY ENVIRONMENT SIMULATION')
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
	I1=GETGTEXTEXTENT('SES VERSION '//SESVER)
      I1=( IWIDTH - I1 )/2.0
      CALL MOVETO(I1,INT2(20),XYS)
      CALL OUTGTEXT(TRIM('SES VERSION '//SESVER))
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
	I1=GETGTEXTEXTENT('Developed by')
      I1=( IWIDTH - I1 )/2.0
      CALL MOVETO(I1,INT2(35),XYS)
      CALL OUTGTEXT('Developed by')
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
	I1=GETGTEXTEXTENT('Parsons Brinckerhoff Quade and Douglas, Inc.')
      I1=( IWIDTH - I1 )/2.0
      CALL MOVETO(I1,INT2(50),XYS)
      CALL OUTGTEXT('Parsons Brinckerhoff Quade and Douglas, Inc.')
C**** DRAW LINES
      CALL MOVETO(INT2(5),INT2(70),XYS)
      STATUS = LINETO(INT2(IWIDTH-10), INT2(70))
      CALL MOVETO(INT2(5),INT2(75),XYS)
      STATUS = LINETO(INT2(IWIDTH-10), INT2(75))
C**** SET CURRENT FONT TYPE
      I1 = SETFONT('T''ARIAL''H13W8EB')
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
	I1=GETGTEXTEXTENT('INPUT FILE')
      I1=( IWIDTH - I1 )/2.0
      CALL MOVETO(I1,INT2(80),XYS)
      CALL OUTGTEXT('INPUT FILE')
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
	I1=GETGTEXTEXTENT('SIMULATION STARTED AT')
      I1=( IWIDTH - I1 )/2.0
      CALL MOVETO(I1,INT2(110),XYS)
      CALL OUTGTEXT('SIMULATION STARTED AT')
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
	I1=GETGTEXTEXTENT('TOTAL SIMULATION TIME')
      I1=( IWIDTH - I1 )/2.0
      CALL MOVETO(I1,INT2(140),XYS)
      CALL OUTGTEXT('TOTAL SIMULATION TIME')
C**** DRAW LINES
      CALL MOVETO(INT2(5),INT2(173),XYS)
      STATUS = LINETO(INT2(IWIDTH-10), INT2(173))
      CALL MOVETO(INT2(5),INT2(178),XYS)
      STATUS = LINETO(INT2(IWIDTH-10), INT2(178))
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
	I1=GETGTEXTEXTENT('SIMULATION STATUS')
      I1=( IWIDTH - I1 )/2.0
      CALL MOVETO(I1,INT2(181),XYS)
      CALL OUTGTEXT('SIMULATION STATUS')
     	RETURN
	END
************************************************************************
C****	SUBROUTINE UPDSTATUS (IOPTION)
      SUBROUTINE UPDSTATUS (IOPTION)
C**** THIS SUBROUTINE UPDATES THE STATUS DISPLAY
	USE DFWIN
	INCLUDE 'DSHARE'
      TYPE (XYCOORD) XYS
	INTEGER*2 I1
C**** WIDTH OF STATUS WINDOW IN PIXELS.  SET IN FUNCTION 
C**** INITIALSETTINGS ( VARIABLE QWI.W )
	DATA IWIDTH /360/
	CHARACTER(38) DispStr
10	FORMAT('Time: ',I6,' seconds',$)
20    FORMAT(I6, ' seconds',$)
      SELECT CASE (IOPTION)
	  CASE (1)
C**** SET CURRENT FONT TYPE AND COLOR
          I1 = SETFONT('T''ARIAL''H14W9EB')
          GRSTAT=SETCOLORrgb(#00ff0000)
	    I1=LEN_TRIM(INPFILE)
	    IF (I1 .GT. 40) THEN
		DispStr( 1:10)=INPFILE(1:10)
	      DispStr(11:13)='...'
            DispStr(14:38)=INPFILE(I1-24:I1)  
	    ELSE
	        DispStr=INPFILE(1:I1)
	    END IF
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
	    I1=GETGTEXTEXTENT(TRIM(DispStr))
          I1=( IWIDTH - I1 )/2.0
          CALL MOVETO(I1,INT2(92),XYS)
          CALL OUTGTEXT(TRIM(DispStr))
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
          I1=GETGTEXTEXTENT(DATETIME(13:20))
          I1=( IWIDTH - I1 )/2.0
          CALL MOVETO(I1,INT2(122),XYS)
          CALL OUTGTEXT(DATETIME(13:20))
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
          I1=GETGTEXTEXTENT('Input Verification')
          I1=( IWIDTH - I1 )/2.0
          CALL MOVETO(I1,INT2(193),XYS)
          CALL OUTGTEXT('Input Verification')
	  CASE (2)
C**** BLANK OUT PREVIOUS ENTRY
          GRSTAT=SETCOLORrgb(#00C0C0C0)
	    I1=RECTANGLE_W($GFILLINTERIOR,20,193,340,205)
          GRSTAT=SETCOLORrgb(#00ff0000)
	    WRITE(DispStr,20)MAXTIM/100
	    DispStr=ADJUSTL(DispStr)
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
          I1=GETGTEXTEXTENT(TRIM(DispStr))
          I1=( IWIDTH - I1 )/2.0
          CALL MOVETO(I1,INT2(152),XYS)
          CALL OUTGTEXT(TRIM(DispStr))
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
          I1=GETGTEXTEXTENT('End of Input Verification')
          I1=( IWIDTH - I1 )/2.0
          CALL MOVETO(I1,INT2(193),XYS)
          CALL OUTGTEXT('End of Input Verification')
	  CASE (3)
	    WRITE(DispStr,10) NTIME/100
C**** BLANK OUT PREVIOUS ENTRY
          GRSTAT=SETCOLORrgb(#00C0C0C0)
	    I1=RECTANGLE_W($GFILLINTERIOR,20,193,340,205)
	    DispStr=ADJUSTL(DispStr)
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
          I1=GETGTEXTEXTENT(TRIM(DispStr))
          I1=( IWIDTH - I1 )/2.0
C**** SET CURRENT FONT COLOR
          GRSTAT=SETCOLORrgb(#00ff0000)
          CALL MOVETO(I1,INT2(193),XYS)
          CALL OUTGTEXT(TRIM(DispStr))
	  CASE (4)
C**** BLANK OUT PREVIOUS ENTRY
          GRSTAT=SETCOLORrgb(#00C0C0C0)
	    I1=RECTANGLE_W($GFILLINTERIOR,20,193,340,205)
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
          I1=GETGTEXTEXTENT('Reading Initialization File')
          I1=( IWIDTH - I1 )/2.0
C**** SET CURRENT FONT COLOR
          GRSTAT=SETCOLORrgb(#00ff0000)
          CALL MOVETO(I1,INT2(193),XYS)
          CALL OUTGTEXT('Reading Initialization File')
	  CASE (5)
C**** BLANK OUT PREVIOUS ENTRY
          GRSTAT=SETCOLORrgb(#00C0C0C0)
	    I1=RECTANGLE_W($GFILLINTERIOR,20,193,340,205)
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
          I1=GETGTEXTEXTENT('Environmental Control Estimate')
          I1=( IWIDTH - I1 )/2.0
C**** SET CURRENT FONT COLOR
          GRSTAT=SETCOLORrgb(#00ff0000)
          CALL MOVETO(I1,INT2(193),XYS)
          CALL OUTGTEXT('Environmental Control Estimate')
	  CASE (6)
C**** BLANK OUT PREVIOUS ENTRY
          GRSTAT=SETCOLORrgb(#00C0C0C0)
	    I1=RECTANGLE_W($GFILLINTERIOR,20,193,340,205)
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
          I1=GETGTEXTEXTENT('Writing Initialization File')
          I1=( IWIDTH - I1 )/2.0
C**** SET CURRENT FONT COLOR
          GRSTAT=SETCOLORrgb(#00ff0000)
          CALL MOVETO(I1,INT2(193),XYS)
          CALL OUTGTEXT('Writing Initialization File')
	  CASE (7)
C**** BLANK OUT PREVIOUS ENTRY
          GRSTAT=SETCOLORrgb(#00C0C0C0)
	    I1=RECTANGLE_W($GFILLINTERIOR,20,193,340,205)
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
          I1=GETGTEXTEXTENT('Formatting Output File')
          I1=( IWIDTH - I1 )/2.0
C**** SET CURRENT FONT COLOR
          GRSTAT=SETCOLORrgb(#00ff0000)
          CALL MOVETO(I1,INT2(193),XYS)
          CALL OUTGTEXT('Formatting Output File')
	  CASE (8)
C**** BLANK OUT PREVIOUS ENTRY
          GRSTAT=SETCOLORrgb(#00C0C0C0)
	    I1=RECTANGLE_W($GFILLINTERIOR,20,193,340,205)
C**** DETERMINE WIDTH OF MESSAGE TO BE DISPLAYED (IN PIXELS), 
C**** CALCULATE X-COORDINATE ON THE DISPLAY WINDOW AND DISPLAY MESSAGE
          I1=GETGTEXTEXTENT('End of Simulation')
          I1=( IWIDTH - I1 )/2.0
C**** SET CURRENT FONT COLOR
          GRSTAT=SETCOLORrgb(#00ff0000)
          CALL MOVETO(I1,INT2(193),XYS)
          CALL OUTGTEXT('End of Simulation')
	END SELECT
      RETURN
	END

C*****************************************************
	subroutine SubclassInit()
	use dflib
	use dfwin
	integer i, j
	logical l
C		Set up the Frame Window
	j = GetWindowLong( GetHWndQQ(QWIN$FRAMEWINDOW), GWL_STYLE )
	j = ior( iand( j, not(WS_THICKFRAME) ), WS_BORDER )
	j = iand( j, not(WS_MAXIMIZEBOX) )
	i = SetWindowLong( GetHWndQQ(QWIN$FRAMEWINDOW), GWL_STYLE, j )	    
	l = SetWindowText( GetHwndQQ(QWIN$FRAMEWINDOW), 
	1			"SES Simulation"C )
C		Set up the child window
	j = GetWindowLong( GetHWndQQ(0), GWL_STYLE )
	j = ior( iand( j, not(WS_CAPTION.or.WS_THICKFRAME.or.WS_SYSMENU) 
	1    ), WS_BORDER )
	i = SetWindowLong( GetHWndQQ(0), GWL_STYLE, j )	    
	l = MoveWindow( GetHWndQQ(0), -1, -1, 400, 300, .TRUE. )

	end subroutine
*************************************************************************
C**** SUBROUTINE CLEARSCR
      SUBROUTINE CLEARSCR
C**** ALTHOUGH THE SUBROUTINE IS ONLY USED IN THE DOS VERSION IS ALSO
C**** INCLUDED IN THIS FILE (WITHOUT ANY STATEMENTS) SINCE IT IS CALLED
C**** FROM DSES.
      RETURN
      END
************************************************************************
